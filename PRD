Product Requirements Document: gitshow - Dynamic GitHub Content Embedding
1. Introduction

1.1 Purpose: This document outlines the product requirements for a script that enables users to easily embed and display the content of public GitHub files directly within any HTML page. The script will handle different file types, rendering code with appropriate formatting (ideally as code blocks) and Markdown content with proper styling. The script will be hosted as a Cloudflare Worker for efficient and scalable delivery.
1.2 Goals:
Provide a simple and intuitive way for non-technical users to display content from public GitHub repositories on their websites.
Offer automatic rendering of common file types like Markdown and code.
Ensure the script is lightweight and has minimal impact on page load times.
Leverage the scalability and performance of Cloudflare Workers for hosting.
1.3 Target Audience: Website owners, bloggers, educators, developers who want to easily showcase code snippets, documentation, or other text-based files from public GitHub repositories on their web pages without complex integration processes.
2. User Stories

As a website owner, I want to embed a Markdown file from a public GitHub repository on my blog post so that it is displayed with proper formatting (headings, lists, etc.) to provide clear and readable content to my visitors.
As a developer, I want to embed a code file (e.g., .js, .py) from a public GitHub repository on my project documentation page so that it is displayed as a formatted code block, making it easy for others to read and understand.
As an educator, I want to embed a plain text file containing instructions from a public GitHub repository on my course website so that students can easily access the information.
As a user, I want to be able to embed content by simply adding a <script> tag to my HTML page with a clear reference to the GitHub file URL.
As a user, I want the embedded content to load quickly and not negatively impact the performance of my webpage.
3. Functional Requirements

FR1: Script Inclusion: Users must be able to include the functionality by adding a <script> tag to their HTML page, pointing to the Cloudflare Worker URL.
FR2: GitHub URL Parameter: The script must accept a mandatory parameter (e.g., githubUrl) in the script tag's src attribute's query string, specifying the full URL of the public GitHub file to be displayed.
FR3: File Content Fetching: The Cloudflare Worker must be able to fetch the content of the specified public GitHub file.
FR4: Markdown Rendering: If the fetched file is identified as a Markdown file (based on file extension .md or content-type), the worker must render it into well-formatted HTML. Basic Markdown elements (headings, lists, bold, italic, links, code blocks) should be supported.
FR5: Code Block Rendering: If the fetched file is identified as a code file (based on common code file extensions like .js, .py, .java, .c, .cpp, .go or content-type starting with text/), the worker must render it within <pre> and <code> tags. The <code> tag should include a class attribute indicating the language (e.g., <code class="javascript">) to facilitate potential client-side syntax highlighting.
FR6: Plain Text Display: If the file is not identified as Markdown or code, the worker should render it as plain text, preserving basic formatting (line breaks). HTML special characters should be escaped for security.
FR7: Dynamic Insertion: The script must dynamically insert the rendered content into the HTML page where the <script> tag is located and then remove the <script> tag itself.
FR8: Error Handling: The Cloudflare Worker should handle cases where the githubUrl is missing, the GitHub file cannot be fetched (e.g., 404 error), or an error occurs during processing. In such cases, it should provide a basic error message in place of the content.
4. Non-Functional Requirements

4.1 Performance: The script and worker should be optimized for speed to minimize any impact on the loading time of the embedding webpage. Fetching and rendering should be efficient.
4.2 Scalability: The Cloudflare Worker should be able to handle a large number of concurrent requests without performance degradation.
4.3 Reliability: The service should be reliable and consistently available.
4.4 Security: The worker must ensure that only content from the specified public GitHub URL is displayed and should prevent any potential cross-site scripting (XSS) vulnerabilities by escaping HTML where necessary.
4.5 Maintainability: The codebase for the Cloudflare Worker should be well-structured and easy to understand and maintain.
4.6 Usability: The integration process for the end-user should be as simple as adding a single <script> tag.
5. Technical Requirements

5.1 Cloudflare Worker: The script will be hosted and executed as a Cloudflare Worker.
5.2 Fetch API: The worker will use the fetch API to retrieve content from GitHub.
5.3 Markdown Parsing (Optional for Initial Release): A lightweight JavaScript Markdown parsing library might be considered for more robust Markdown rendering. If not in the initial release, basic regex-based rendering will be used.
5.4 HTML Escaping: A function to safely escape HTML special characters must be implemented or utilized.
5.5 Content Type Detection: The worker will need to analyze the content-type header and/or file extension to determine the type of the fetched file.
5.6 Dynamic DOM Manipulation: The client-side script injected by the worker will use JavaScript DOM manipulation to insert the rendered content.
6. Release Criteria

All functional requirements outlined in Section 3 must be implemented and tested.
Basic Markdown rendering (headings, lists, bold, italic, links, basic code blocks) must be functional.
Code files must be correctly rendered within <pre> and <code> tags with appropriate language classes.
Plain text files must be displayed correctly with HTML entities escaped.
Basic error handling for invalid or inaccessible GitHub URLs must be implemented.
The script must be successfully deployable and accessible as a Cloudflare Worker.
Basic performance testing should demonstrate minimal impact on page load times.
7. Future Considerations (Out of Scope for Initial Release)

Syntax highlighting for code blocks (client-side library integration).
More advanced Markdown features (tables, images, etc.).
Options to specify a target HTML element for content insertion.
Support for specific lines or sections of a file.
Caching mechanisms in the Cloudflare Worker.
Handling of different GitHub URL formats (e.g., raw URLs).
More sophisticated error reporting.